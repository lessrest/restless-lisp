* I/O

  If the program wants to fetch a URL, it should end up running

    (CONTROL LISP:*IO-PROMPT* `(FETCH ,URL))

  So the I/O prompt receives a request and a continuation.

  The I/O prompt handler, a native JavaScript builtin, starts an async
  request with a callback that in turn notifies the "kernel," which is
  the most low-level prompt.

    (CONTROL LISP:*KERNEL-PROMPT* `(SCHEDULE ,K ,RESULT))

  The kernel prompt will add the continuation to a queue, and start
  evaluating it.

(defun sleep (duration transient)
  (match (control *thread* `(:sleep ,duration))
    (:ok nil)
    (`(:resumed ,time-left)
     (if transient
        (control *thread* :stop)
        (sleep time-left))))

* Prompts

   - Kernel
    - Kernel I/O
      - Thread
       - Thread I/O
      - Thread
       - Thread I/O
        - REPL
* Cursor
  We're drawing terms as ellies with subterms as subellies, in order
  to support stateful term interaction like toggling expansion, etc.

  That's fine, all it means is that each elli has some onclick handler
  pointing to a channel which points to a promise.

  Maybe what I really should think about is /term editing/.

* Term editor

  A term editor is not a term.  A term editor "edits" a term; it
  manipulates a structure that represents a term.

  Could I make a term editor in Lisp?

  A term editor is naturally recursive.

  A term editor could maintain a hierarchy of nodes which corresponds
  to the term structure.

* Concurrency

  This would be good to actually clarify.

  #+BEGIN_SRC
  (concurrently
    (lambda () (print (fetch "//google.com")))
    (lambda () (do (print "ok") (sleep 1) (print "hey"))))
  #+END_SRC

  This would expand to

  #+BEGIN_SRC
  (prompt :yield
    (lambda ()
      (print (control :yield (%fetch "//google.com"))))
    (lambda (v k)
      (control :schedule (list v k))))
  (prompt :yield
    (lambda ()
      (do (print "ok") 
           (control :yield (%sleep 1))
           (print "hey")))
    (lambda (v k)
      (control :schedule (list v k))))
  #+END_SRC

  
